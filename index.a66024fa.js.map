{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static ROWS = 4;\n    static COLUMNS = 4;\n    static IDLE = \"idle\";\n    static PLAYING = \"playing\";\n    static WIN = \"win\";\n    static LOSE = \"lose\";\n    static getInitialStateDefault() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    constructor(initialState = $a5fd07fa01589658$var$Game.getInitialStateDefault()){\n        this.setBoard = JSON.parse(JSON.stringify(initialState));\n        this.board = JSON.parse(JSON.stringify(initialState));\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.IDLE;\n    }\n    moveLeft() {\n        if (this.canMoveLeft() && this.status === $a5fd07fa01589658$var$Game.PLAYING) {\n            for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++){\n                let rowCurrent = this.board[r];\n                rowCurrent = this.slide(rowCurrent);\n                this.board[r] = rowCurrent;\n            }\n            this.setTwo();\n            this.checkLose();\n            this.checkWin();\n            return true;\n        }\n        return false;\n    }\n    moveRight() {\n        if (this.canMoveRight() && this.status === $a5fd07fa01589658$var$Game.PLAYING) {\n            for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++){\n                let rowCurrent = this.board[r];\n                rowCurrent.reverse();\n                rowCurrent = this.slide(rowCurrent);\n                this.board[r] = rowCurrent.reverse();\n            }\n            this.setTwo();\n            this.checkLose();\n            this.checkWin();\n            return true;\n        }\n        return false;\n    }\n    moveUp() {\n        if (this.canMoveUp() && this.status === $a5fd07fa01589658$var$Game.PLAYING) {\n            for(let c = 0; c < $a5fd07fa01589658$var$Game.COLUMNS; c++){\n                let rowCurrent = [\n                    this.board[0][c],\n                    this.board[1][c],\n                    this.board[2][c],\n                    this.board[3][c]\n                ];\n                rowCurrent = this.slide(rowCurrent);\n                for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++)this.board[r][c] = rowCurrent[r];\n            }\n            this.setTwo();\n            this.checkLose();\n            this.checkWin();\n            return true;\n        }\n        return false;\n    }\n    moveDown() {\n        if (this.canMoveDown() && this.status === $a5fd07fa01589658$var$Game.PLAYING) {\n            for(let c = 0; c < $a5fd07fa01589658$var$Game.COLUMNS; c++){\n                let rowCurrent = [\n                    this.board[0][c],\n                    this.board[1][c],\n                    this.board[2][c],\n                    this.board[3][c]\n                ];\n                rowCurrent.reverse();\n                rowCurrent = this.slide(rowCurrent);\n                rowCurrent.reverse();\n                for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++)this.board[r][c] = rowCurrent[r];\n            }\n            this.setTwo();\n            this.checkLose();\n            this.checkWin();\n            return true;\n        }\n        return false;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.setTwo();\n        this.setTwo();\n        this.status = $a5fd07fa01589658$var$Game.PLAYING;\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.board = JSON.parse(JSON.stringify(this.setBoard));\n        this.status = $a5fd07fa01589658$var$Game.IDLE;\n    }\n    setTwo() {\n        // check empty cell\n        if (!this.hasEmptyTile()) return;\n        let found = false;\n        let r = 0;\n        let c = 0;\n        let num = 0;\n        while(!found){\n            // find random row and column to place a 2 and 4 in\n            r = Math.floor(Math.random() * $a5fd07fa01589658$var$Game.ROWS);\n            c = Math.floor(Math.random() * $a5fd07fa01589658$var$Game.COLUMNS);\n            if (this.board[r][c] === 0) {\n                num = Math.random() > 0.1 ? 2 : 4;\n                this.board[r][c] = num;\n                found = true;\n            }\n        }\n    }\n    hasEmptyTile() {\n        for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$var$Game.COLUMNS; c++){\n            if (this.board[r][c] === 0) return true;\n        }\n        return false;\n    }\n    filterZero(array) {\n        return array.filter((num)=>num !== 0);\n    }\n    slide(rowCurrent) {\n        let row = rowCurrent;\n        row = this.filterZero(rowCurrent);\n        if (row.length === 0) return [\n            0,\n            0,\n            0,\n            0\n        ];\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        row = this.filterZero(row);\n        while(row.length < $a5fd07fa01589658$var$Game.ROWS)row.push(0);\n        return row;\n    }\n    checkWin() {\n        for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++){\n            for(let c = 0; c < $a5fd07fa01589658$var$Game.COLUMNS; c++)if (this.board[r][c] === 2048) this.status = $a5fd07fa01589658$var$Game.WIN;\n        }\n    }\n    checkLose() {\n        // if no empty cell and u cant move left right down up\n        const arrayOfConditions = [\n            this.hasEmptyTile(),\n            this.canMoveLeft(),\n            this.canMoveRight(),\n            this.canMoveUp(),\n            this.canMoveDown()\n        ];\n        if (arrayOfConditions.indexOf(true) === -1) this.status = $a5fd07fa01589658$var$Game.LOSE;\n    }\n    canMoveLeft() {\n        for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++){\n            const row1 = Array.from(this.board[r]);\n            const row2 = this.canSlide(row1);\n            // if two rows not the same\n            // thant mean one of the tile was moved and we can make a move\n            if (!this.isArrayTheSame(row1, row2)) return true;\n        }\n        // if they all same nothing changes\n        return false;\n    }\n    canMoveRight() {\n        for(let r = 0; r < $a5fd07fa01589658$var$Game.ROWS; r++){\n            const row1 = Array.from(this.board[r]);\n            const row2 = this.canSlide(row1.reverse());\n            if (!this.isArrayTheSame(row1, row2)) return true;\n        }\n        return false;\n    }\n    canMoveUp() {\n        for(let c = 0; c < $a5fd07fa01589658$var$Game.COLUMNS; c++){\n            const row = [\n                this.board[0][c],\n                this.board[1][c],\n                this.board[2][c],\n                this.board[3][c]\n            ];\n            const row1 = Array.from(row);\n            const row2 = this.canSlide([\n                ...row1\n            ]);\n            if (!this.isArrayTheSame(row1, row2)) return true;\n        }\n        return false;\n    }\n    canMoveDown() {\n        for(let c = 0; c < $a5fd07fa01589658$var$Game.COLUMNS; c++){\n            const row = [\n                this.board[0][c],\n                this.board[1][c],\n                this.board[2][c],\n                this.board[3][c]\n            ];\n            const row1 = Array.from(row);\n            const row2 = this.canSlide([\n                ...row1\n            ].reverse()).reverse();\n            if (!this.isArrayTheSame(row1, row2)) return true;\n        }\n        return false;\n    }\n    isArrayTheSame(row1, row2) {\n        for(let i = 0; i < row1.length; i++){\n            if (row1[i] !== row2[i]) return false;\n        }\n        return true;\n    }\n    canSlide(rowCurrent) {\n        let row = rowCurrent;\n        row = this.filterZero(rowCurrent);\n        if (row.length === 0) return [\n            0,\n            0,\n            0,\n            0\n        ];\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n        }\n        row = this.filterZero(row);\n        while(row.length < $a5fd07fa01589658$var$Game.ROWS)row.push(0);\n        return row;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messegeStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messegeWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messegeLose = document.querySelector(\".message-lose\");\n// button start click\n$09e991522ca7e64e$var$button.onclick = function() {\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.innerText = \"Restart\";\n        $09e991522ca7e64e$var$messegeStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$start();\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.innerText = \"Start\";\n        $09e991522ca7e64e$var$messegeStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        const cells = document.querySelectorAll(\".field-cell\");\n        cells.forEach((cell)=>{\n            cell.innerText = \"\";\n            cell.classList.value = \"\";\n            cell.classList.add(\"field-cell\");\n        });\n        document.querySelector(\".game-score\").innerText = \"0\";\n        if (!$09e991522ca7e64e$var$messegeWin.classList.contains(\"hidden\")) document.querySelector(\".message-win\").classList.add(\"hidden\");\n        if (!$09e991522ca7e64e$var$messegeLose.classList.contains(\"hidden\")) document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    }\n};\n// event lisener\ndocument.addEventListener(\"keyup\", (e)=>{\n    switch(e.code){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$moveDown();\n            break;\n    }\n    document.querySelector(\".game-score\").innerText = $09e991522ca7e64e$var$game.getScore();\n});\nfunction $09e991522ca7e64e$var$setTheBoard() {\n    for(let r = 0; r < $a5fd07fa01589658$exports.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$exports.COLUMNS; c++){\n        const value = $09e991522ca7e64e$var$game.setBoard[r][c];\n        const tile = document.getElementById(r.toString() + \"-\" + c.toString());\n        $09e991522ca7e64e$var$updateCell(tile, value);\n    }\n}\nfunction $09e991522ca7e64e$var$start() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$setTheBoard();\n    $09e991522ca7e64e$var$setTile();\n}\nfunction $09e991522ca7e64e$var$updateCell(cell, value) {\n    cell.textContent = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (value > 0) {\n        cell.innerText = value.toString();\n        cell.classList.add(\"field-cell--\" + value.toString());\n    }\n}\nfunction $09e991522ca7e64e$var$setTile() {\n    for(let r = 0; r < $a5fd07fa01589658$exports.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$exports.COLUMNS; c++){\n        const value = $09e991522ca7e64e$var$game.board[r][c];\n        const tile = document.getElementById(r.toString() + \"-\" + c.toString());\n        $09e991522ca7e64e$var$updateCell(tile, value);\n    }\n}\nfunction $09e991522ca7e64e$var$moveLeft() {\n    if ($09e991522ca7e64e$var$game.moveLeft()) {\n        $09e991522ca7e64e$var$setTile();\n        $09e991522ca7e64e$var$win();\n        $09e991522ca7e64e$var$lose();\n        for(let r = 0; r < $a5fd07fa01589658$exports.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$exports.COLUMNS; c++){\n            const value = $09e991522ca7e64e$var$game.board[r][c];\n            const tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $09e991522ca7e64e$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$moveRight() {\n    if ($09e991522ca7e64e$var$game.moveRight()) {\n        $09e991522ca7e64e$var$setTile();\n        $09e991522ca7e64e$var$win();\n        $09e991522ca7e64e$var$lose();\n        for(let r = 0; r < $a5fd07fa01589658$exports.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$exports.COLUMNS; c++){\n            const value = $09e991522ca7e64e$var$game.board[r][c];\n            const tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $09e991522ca7e64e$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$moveUp() {\n    if ($09e991522ca7e64e$var$game.moveUp()) {\n        $09e991522ca7e64e$var$setTile();\n        $09e991522ca7e64e$var$win();\n        $09e991522ca7e64e$var$lose();\n        for(let r = 0; r < $a5fd07fa01589658$exports.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$exports.COLUMNS; c++){\n            const value = $09e991522ca7e64e$var$game.board[r][c];\n            const tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $09e991522ca7e64e$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$moveDown() {\n    if ($09e991522ca7e64e$var$game.moveDown()) {\n        $09e991522ca7e64e$var$setTile();\n        $09e991522ca7e64e$var$win();\n        $09e991522ca7e64e$var$lose();\n        for(let r = 0; r < $a5fd07fa01589658$exports.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$exports.COLUMNS; c++){\n            const value = $09e991522ca7e64e$var$game.board[r][c];\n            const tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $09e991522ca7e64e$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$win() {\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.WIN) $09e991522ca7e64e$var$messegeWin.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$lose() {\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.LOSE) $09e991522ca7e64e$var$messegeLose.classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.a66024fa.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst button = document.querySelector('.button');\nconst messegeStart = document.querySelector('.message-start');\nconst messegeWin = document.querySelector('.message-win');\nconst messegeLose = document.querySelector('.message-lose');\n\n// button start click\n\nbutton.onclick = function () {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messegeStart.classList.add('hidden');\n\n    start();\n  } else if (button.classList.contains('restart')) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.innerText = 'Start';\n    messegeStart.classList.remove('hidden');\n    game.restart();\n\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell) => {\n      cell.innerText = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n    });\n\n    document.querySelector('.game-score').innerText = '0';\n\n    if (!messegeWin.classList.contains('hidden')) {\n      document.querySelector('.message-win').classList.add('hidden');\n    }\n\n    if (!messegeLose.classList.contains('hidden')) {\n      document.querySelector('.message-lose').classList.add('hidden');\n    }\n  }\n};\n\n// event lisener\n\ndocument.addEventListener('keyup', (e) => {\n  switch (e.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  document.querySelector('.game-score').innerText = game.getScore();\n});\n\nfunction setTheBoard() {\n  for (let r = 0; r < Game.ROWS; r++) {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const value = game.setBoard[r][c];\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      updateCell(tile, value);\n    }\n  }\n}\n\nfunction start() {\n  game.start();\n  setTheBoard();\n\n  setTile();\n}\n\nfunction updateCell(cell, value) {\n  cell.textContent = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (value > 0) {\n    cell.innerText = value.toString();\n    cell.classList.add('field-cell--' + value.toString());\n  }\n}\n\nfunction setTile() {\n  for (let r = 0; r < Game.ROWS; r++) {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const value = game.board[r][c];\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      updateCell(tile, value);\n    }\n  }\n}\n\nfunction moveLeft() {\n  if (game.moveLeft()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  if (game.moveRight()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction moveUp() {\n  if (game.moveUp()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction moveDown() {\n  if (game.moveDown()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction win() {\n  if (game.getStatus() === Game.WIN) {\n    messegeWin.classList.remove('hidden');\n  }\n}\n\nfunction lose() {\n  if (game.getStatus() === Game.LOSE) {\n    messegeLose.classList.remove('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  static ROWS = 4;\n  static COLUMNS = 4;\n  static IDLE = 'idle';\n  static PLAYING = 'playing';\n  static WIN = 'win';\n  static LOSE = 'lose';\n\n  static getInitialStateDefault() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  constructor(initialState = Game.getInitialStateDefault()) {\n    this.setBoard = JSON.parse(JSON.stringify(initialState));\n    this.board = JSON.parse(JSON.stringify(initialState));\n    this.score = 0;\n    this.status = Game.IDLE;\n  }\n\n  moveLeft() {\n    if (this.canMoveLeft() && this.status === Game.PLAYING) {\n      for (let r = 0; r < Game.ROWS; r++) {\n        let rowCurrent = this.board[r];\n\n        rowCurrent = this.slide(rowCurrent);\n\n        this.board[r] = rowCurrent;\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveRight() {\n    if (this.canMoveRight() && this.status === Game.PLAYING) {\n      for (let r = 0; r < Game.ROWS; r++) {\n        let rowCurrent = this.board[r];\n\n        rowCurrent.reverse();\n\n        rowCurrent = this.slide(rowCurrent);\n\n        this.board[r] = rowCurrent.reverse();\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveUp() {\n    if (this.canMoveUp() && this.status === Game.PLAYING) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        let rowCurrent = [\n          this.board[0][c],\n          this.board[1][c],\n          this.board[2][c],\n          this.board[3][c],\n        ];\n\n        rowCurrent = this.slide(rowCurrent);\n\n        for (let r = 0; r < Game.ROWS; r++) {\n          this.board[r][c] = rowCurrent[r];\n        }\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveDown() {\n    if (this.canMoveDown() && this.status === Game.PLAYING) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        let rowCurrent = [\n          this.board[0][c],\n          this.board[1][c],\n          this.board[2][c],\n          this.board[3][c],\n        ];\n\n        rowCurrent.reverse();\n        rowCurrent = this.slide(rowCurrent);\n        rowCurrent.reverse();\n\n        for (let r = 0; r < Game.ROWS; r++) {\n          this.board[r][c] = rowCurrent[r];\n        }\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.setTwo();\n    this.setTwo();\n    this.status = Game.PLAYING;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.board = JSON.parse(JSON.stringify(this.setBoard));\n    this.status = Game.IDLE;\n  }\n\n  setTwo() {\n    // check empty cell\n    if (!this.hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n    let r = 0;\n    let c = 0;\n    let num = 0;\n\n    while (!found) {\n      // find random row and column to place a 2 and 4 in\n\n      r = Math.floor(Math.random() * Game.ROWS);\n      c = Math.floor(Math.random() * Game.COLUMNS);\n\n      if (this.board[r][c] === 0) {\n        num = Math.random() > 0.1 ? 2 : 4;\n\n        this.board[r][c] = num;\n\n        found = true;\n      }\n    }\n  }\n\n  hasEmptyTile() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  filterZero(array) {\n    return array.filter((num) => num !== 0);\n  }\n\n  slide(rowCurrent) {\n    let row = rowCurrent;\n\n    row = this.filterZero(rowCurrent);\n\n    if (row.length === 0) {\n      return [0, 0, 0, 0];\n    }\n\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    row = this.filterZero(row);\n\n    while (row.length < Game.ROWS) {\n      row.push(0);\n    }\n\n    return row;\n  }\n\n  checkWin() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        if (this.board[r][c] === 2048) {\n          this.status = Game.WIN;\n        }\n      }\n    }\n  }\n\n  checkLose() {\n    // if no empty cell and u cant move left right down up\n    const arrayOfConditions = [\n      this.hasEmptyTile(),\n      this.canMoveLeft(),\n      this.canMoveRight(),\n      this.canMoveUp(),\n      this.canMoveDown(),\n    ];\n\n    if (arrayOfConditions.indexOf(true) === -1) {\n      this.status = Game.LOSE;\n    }\n  }\n\n  canMoveLeft() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      const row1 = Array.from(this.board[r]);\n      const row2 = this.canSlide(row1);\n\n      // if two rows not the same\n      // thant mean one of the tile was moved and we can make a move\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    // if they all same nothing changes\n    return false;\n  }\n\n  canMoveRight() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      const row1 = Array.from(this.board[r]);\n      const row2 = this.canSlide(row1.reverse());\n\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canMoveUp() {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const row = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      const row1 = Array.from(row);\n      const row2 = this.canSlide([...row1]);\n\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canMoveDown() {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const row = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      const row1 = Array.from(row);\n      const row2 = this.canSlide([...row1].reverse()).reverse();\n\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isArrayTheSame(row1, row2) {\n    for (let i = 0; i < row1.length; i++) {\n      if (row1[i] !== row2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSlide(rowCurrent) {\n    let row = rowCurrent;\n\n    row = this.filterZero(rowCurrent);\n\n    if (row.length === 0) {\n      return [0, 0, 0, 0];\n    }\n\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n      }\n    }\n\n    row = this.filterZero(row);\n\n    while (row.length < Game.ROWS) {\n      row.push(0);\n    }\n\n    return row;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","ROWS","COLUMNS","IDLE","PLAYING","WIN","LOSE","getInitialStateDefault","constructor","initialState","setBoard","JSON","parse","stringify","board","score","status","moveLeft","canMoveLeft","r","rowCurrent","slide","setTwo","checkLose","checkWin","moveRight","canMoveRight","reverse","moveUp","canMoveUp","c","moveDown","canMoveDown","getScore","getState","getStatus","start","restart","hasEmptyTile","found","num","Math","floor","random","filterZero","array","filter","row","length","i","push","arrayOfConditions","indexOf","row1","Array","from","row2","canSlide","isArrayTheSame","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$messegeStart","$09e991522ca7e64e$var$messegeWin","$09e991522ca7e64e$var$messegeLose","$09e991522ca7e64e$var$updateCell","cell","value","textContent","classList","add","innerText","toString","$09e991522ca7e64e$var$setTile","getElementById","$09e991522ca7e64e$var$win","remove","$09e991522ca7e64e$var$lose","onclick","contains","$09e991522ca7e64e$var$setTheBoard","cells","querySelectorAll","forEach","addEventListener","e","code","$09e991522ca7e64e$var$moveLeft","$09e991522ca7e64e$var$moveRight","$09e991522ca7e64e$var$moveUp","$09e991522ca7e64e$var$moveDown"],"version":3,"file":"index.a66024fa.js.map"}