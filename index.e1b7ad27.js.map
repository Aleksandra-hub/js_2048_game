{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Game.getInitialStateDefault();\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.setBoard = JSON.parse(JSON.stringify(initialState));\n        this.board = JSON.parse(JSON.stringify(initialState));\n        this.score = 0;\n        this.status = Game.IDLE;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.canMoveLeft() && this.status === Game.PLAYING) {\n                    for(var r = 0; r < Game.ROWS; r++){\n                        var rowCurrent = this.board[r];\n                        rowCurrent = this.slide(rowCurrent);\n                        this.board[r] = rowCurrent;\n                    }\n                    this.setTwo();\n                    this.checkLose();\n                    this.checkWin();\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.canMoveRight() && this.status === Game.PLAYING) {\n                    for(var r = 0; r < Game.ROWS; r++){\n                        var rowCurrent = this.board[r];\n                        rowCurrent.reverse();\n                        rowCurrent = this.slide(rowCurrent);\n                        this.board[r] = rowCurrent.reverse();\n                    }\n                    this.setTwo();\n                    this.checkLose();\n                    this.checkWin();\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.canMoveUp() && this.status === Game.PLAYING) {\n                    for(var c = 0; c < Game.COLUMNS; c++){\n                        var rowCurrent = [\n                            this.board[0][c],\n                            this.board[1][c],\n                            this.board[2][c],\n                            this.board[3][c]\n                        ];\n                        rowCurrent = this.slide(rowCurrent);\n                        for(var r = 0; r < Game.ROWS; r++)this.board[r][c] = rowCurrent[r];\n                    }\n                    this.setTwo();\n                    this.checkLose();\n                    this.checkWin();\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.canMoveDown() && this.status === Game.PLAYING) {\n                    for(var c = 0; c < Game.COLUMNS; c++){\n                        var rowCurrent = [\n                            this.board[0][c],\n                            this.board[1][c],\n                            this.board[2][c],\n                            this.board[3][c]\n                        ];\n                        rowCurrent.reverse();\n                        rowCurrent = this.slide(rowCurrent);\n                        rowCurrent.reverse();\n                        for(var r = 0; r < Game.ROWS; r++)this.board[r][c] = rowCurrent[r];\n                    }\n                    this.setTwo();\n                    this.checkLose();\n                    this.checkWin();\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.setTwo();\n                this.setTwo();\n                this.status = Game.PLAYING;\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.score = 0;\n                this.board = JSON.parse(JSON.stringify(this.setBoard));\n                this.status = Game.IDLE;\n            }\n        },\n        {\n            key: \"setTwo\",\n            value: function setTwo() {\n                // check empty cell\n                if (!this.hasEmptyTile()) return;\n                var found = false;\n                var r = 0;\n                var c = 0;\n                var num = 0;\n                while(!found){\n                    // find random row and column to place a 2 and 4 in\n                    r = Math.floor(Math.random() * Game.ROWS);\n                    c = Math.floor(Math.random() * Game.COLUMNS);\n                    if (this.board[r][c] === 0) {\n                        num = Math.random() > 0.1 ? 2 : 4;\n                        this.board[r][c] = num;\n                        found = true;\n                    }\n                }\n            }\n        },\n        {\n            key: \"hasEmptyTile\",\n            value: function hasEmptyTile() {\n                for(var r = 0; r < Game.ROWS; r++)for(var c = 0; c < Game.COLUMNS; c++){\n                    if (this.board[r][c] === 0) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"filterZero\",\n            value: function filterZero(array) {\n                return array.filter(function(num) {\n                    return num !== 0;\n                });\n            }\n        },\n        {\n            key: \"slide\",\n            value: function slide(rowCurrent) {\n                var row = rowCurrent;\n                row = this.filterZero(rowCurrent);\n                if (row.length === 0) return [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n                for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n                    row[i] *= 2;\n                    row[i + 1] = 0;\n                    this.score += row[i];\n                }\n                row = this.filterZero(row);\n                while(row.length < Game.ROWS)row.push(0);\n                return row;\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                for(var r = 0; r < Game.ROWS; r++){\n                    for(var c = 0; c < Game.COLUMNS; c++)if (this.board[r][c] === 2048) this.status = Game.WIN;\n                }\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                // if no empty cell and u cant move left right down up\n                var arrayOfConditions = [\n                    this.hasEmptyTile(),\n                    this.canMoveLeft(),\n                    this.canMoveRight(),\n                    this.canMoveUp(),\n                    this.canMoveDown()\n                ];\n                if (arrayOfConditions.indexOf(true) === -1) this.status = Game.LOSE;\n            }\n        },\n        {\n            key: \"canMoveLeft\",\n            value: function canMoveLeft() {\n                for(var r = 0; r < Game.ROWS; r++){\n                    var row1 = Array.from(this.board[r]);\n                    var row2 = this.canSlide(row1);\n                    // if two rows not the same\n                    // thant mean one of the tile was moved and we can make a move\n                    if (!this.isArrayTheSame(row1, row2)) return true;\n                }\n                // if they all same nothing changes\n                return false;\n            }\n        },\n        {\n            key: \"canMoveRight\",\n            value: function canMoveRight() {\n                for(var r = 0; r < Game.ROWS; r++){\n                    var row1 = Array.from(this.board[r]);\n                    var row2 = this.canSlide(row1.reverse());\n                    if (!this.isArrayTheSame(row1, row2)) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"canMoveUp\",\n            value: function canMoveUp() {\n                for(var c = 0; c < Game.COLUMNS; c++){\n                    var row = [\n                        this.board[0][c],\n                        this.board[1][c],\n                        this.board[2][c],\n                        this.board[3][c]\n                    ];\n                    var row1 = Array.from(row);\n                    var row2 = this.canSlide((0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row1));\n                    if (!this.isArrayTheSame(row1, row2)) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"canMoveDown\",\n            value: function canMoveDown() {\n                for(var c = 0; c < Game.COLUMNS; c++){\n                    var row = [\n                        this.board[0][c],\n                        this.board[1][c],\n                        this.board[2][c],\n                        this.board[3][c]\n                    ];\n                    var row1 = Array.from(row);\n                    var row2 = this.canSlide((0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row1).reverse()).reverse();\n                    if (!this.isArrayTheSame(row1, row2)) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isArrayTheSame\",\n            value: function isArrayTheSame(row1, row2) {\n                for(var i = 0; i < row1.length; i++){\n                    if (row1[i] !== row2[i]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"canSlide\",\n            value: function canSlide(rowCurrent) {\n                var row = rowCurrent;\n                row = this.filterZero(rowCurrent);\n                if (row.length === 0) return [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n                for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n                    row[i] *= 2;\n                    row[i + 1] = 0;\n                }\n                row = this.filterZero(row);\n                while(row.length < Game.ROWS)row.push(0);\n                return row;\n            }\n        }\n    ], [\n        {\n            key: \"getInitialStateDefault\",\n            value: function getInitialStateDefault() {\n                return [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n            }\n        }\n    ]);\n    return Game;\n}();\n/**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"ROWS\", 4);\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"COLUMNS\", 4);\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"IDLE\", \"idle\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"PLAYING\", \"playing\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"WIN\", \"win\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"LOSE\", \"lose\");\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$messegeStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messegeWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messegeLose = document.querySelector(\".message-lose\");\n// button start click\n$197cd56b15c33885$var$button.onclick = function() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.innerText = \"Restart\";\n        $197cd56b15c33885$var$messegeStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$start();\n    } else if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n        $197cd56b15c33885$var$button.innerText = \"Start\";\n        $197cd56b15c33885$var$messegeStart.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$game.restart();\n        var cells = document.querySelectorAll(\".field-cell\");\n        cells.forEach(function(cell) {\n            cell.innerText = \"\";\n            cell.classList.value = \"\";\n            cell.classList.add(\"field-cell\");\n        });\n        document.querySelector(\".game-score\").innerText = \"0\";\n        if (!$197cd56b15c33885$var$messegeWin.classList.contains(\"hidden\")) document.querySelector(\".message-win\").classList.add(\"hidden\");\n        if (!$197cd56b15c33885$var$messegeLose.classList.contains(\"hidden\")) document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    }\n};\n// event lisener\ndocument.addEventListener(\"keyup\", function(e) {\n    switch(e.code){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$moveDown();\n            break;\n    }\n    document.querySelector(\".game-score\").innerText = $197cd56b15c33885$var$game.getScore();\n});\nfunction $197cd56b15c33885$var$setTheBoard() {\n    for(var r = 0; r < $3d28d7f1aac198f5$exports.ROWS; r++)for(var c = 0; c < $3d28d7f1aac198f5$exports.COLUMNS; c++){\n        var value = $197cd56b15c33885$var$game.setBoard[r][c];\n        var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n        $197cd56b15c33885$var$updateCell(tile, value);\n    }\n}\nfunction $197cd56b15c33885$var$start() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$setTheBoard();\n    $197cd56b15c33885$var$setTile();\n}\nfunction $197cd56b15c33885$var$updateCell(cell, value) {\n    cell.textContent = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (value > 0) {\n        cell.innerText = value.toString();\n        cell.classList.add(\"field-cell--\" + value.toString());\n    }\n}\nfunction $197cd56b15c33885$var$setTile() {\n    for(var r = 0; r < $3d28d7f1aac198f5$exports.ROWS; r++)for(var c = 0; c < $3d28d7f1aac198f5$exports.COLUMNS; c++){\n        var value = $197cd56b15c33885$var$game.board[r][c];\n        var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n        $197cd56b15c33885$var$updateCell(tile, value);\n    }\n}\nfunction $197cd56b15c33885$var$moveLeft() {\n    if ($197cd56b15c33885$var$game.moveLeft()) {\n        $197cd56b15c33885$var$setTile();\n        $197cd56b15c33885$var$win();\n        $197cd56b15c33885$var$lose();\n        for(var r = 0; r < $3d28d7f1aac198f5$exports.ROWS; r++)for(var c = 0; c < $3d28d7f1aac198f5$exports.COLUMNS; c++){\n            var value = $197cd56b15c33885$var$game.board[r][c];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $197cd56b15c33885$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $197cd56b15c33885$var$moveRight() {\n    if ($197cd56b15c33885$var$game.moveRight()) {\n        $197cd56b15c33885$var$setTile();\n        $197cd56b15c33885$var$win();\n        $197cd56b15c33885$var$lose();\n        for(var r = 0; r < $3d28d7f1aac198f5$exports.ROWS; r++)for(var c = 0; c < $3d28d7f1aac198f5$exports.COLUMNS; c++){\n            var value = $197cd56b15c33885$var$game.board[r][c];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $197cd56b15c33885$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $197cd56b15c33885$var$moveUp() {\n    if ($197cd56b15c33885$var$game.moveUp()) {\n        $197cd56b15c33885$var$setTile();\n        $197cd56b15c33885$var$win();\n        $197cd56b15c33885$var$lose();\n        for(var r = 0; r < $3d28d7f1aac198f5$exports.ROWS; r++)for(var c = 0; c < $3d28d7f1aac198f5$exports.COLUMNS; c++){\n            var value = $197cd56b15c33885$var$game.board[r][c];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $197cd56b15c33885$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $197cd56b15c33885$var$moveDown() {\n    if ($197cd56b15c33885$var$game.moveDown()) {\n        $197cd56b15c33885$var$setTile();\n        $197cd56b15c33885$var$win();\n        $197cd56b15c33885$var$lose();\n        for(var r = 0; r < $3d28d7f1aac198f5$exports.ROWS; r++)for(var c = 0; c < $3d28d7f1aac198f5$exports.COLUMNS; c++){\n            var value = $197cd56b15c33885$var$game.board[r][c];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            $197cd56b15c33885$var$updateCell(tile, value);\n        }\n    }\n}\nfunction $197cd56b15c33885$var$win() {\n    if ($197cd56b15c33885$var$game.getStatus() === $3d28d7f1aac198f5$exports.WIN) $197cd56b15c33885$var$messegeWin.classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$lose() {\n    if ($197cd56b15c33885$var$game.getStatus() === $3d28d7f1aac198f5$exports.LOSE) $197cd56b15c33885$var$messegeLose.classList.remove(\"hidden\");\n}\n\n})();\n//# sourceMappingURL=index.e1b7ad27.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst button = document.querySelector('.button');\nconst messegeStart = document.querySelector('.message-start');\nconst messegeWin = document.querySelector('.message-win');\nconst messegeLose = document.querySelector('.message-lose');\n\n// button start click\n\nbutton.onclick = function () {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messegeStart.classList.add('hidden');\n\n    start();\n  } else if (button.classList.contains('restart')) {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.innerText = 'Start';\n    messegeStart.classList.remove('hidden');\n    game.restart();\n\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell) => {\n      cell.innerText = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n    });\n\n    document.querySelector('.game-score').innerText = '0';\n\n    if (!messegeWin.classList.contains('hidden')) {\n      document.querySelector('.message-win').classList.add('hidden');\n    }\n\n    if (!messegeLose.classList.contains('hidden')) {\n      document.querySelector('.message-lose').classList.add('hidden');\n    }\n  }\n};\n\n// event lisener\n\ndocument.addEventListener('keyup', (e) => {\n  switch (e.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  document.querySelector('.game-score').innerText = game.getScore();\n});\n\nfunction setTheBoard() {\n  for (let r = 0; r < Game.ROWS; r++) {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const value = game.setBoard[r][c];\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      updateCell(tile, value);\n    }\n  }\n}\n\nfunction start() {\n  game.start();\n  setTheBoard();\n\n  setTile();\n}\n\nfunction updateCell(cell, value) {\n  cell.textContent = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (value > 0) {\n    cell.innerText = value.toString();\n    cell.classList.add('field-cell--' + value.toString());\n  }\n}\n\nfunction setTile() {\n  for (let r = 0; r < Game.ROWS; r++) {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const value = game.board[r][c];\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      updateCell(tile, value);\n    }\n  }\n}\n\nfunction moveLeft() {\n  if (game.moveLeft()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  if (game.moveRight()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction moveUp() {\n  if (game.moveUp()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction moveDown() {\n  if (game.moveDown()) {\n    setTile();\n    win();\n    lose();\n\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        const value = game.board[r][c];\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        updateCell(tile, value);\n      }\n    }\n  }\n}\n\nfunction win() {\n  if (game.getStatus() === Game.WIN) {\n    messegeWin.classList.remove('hidden');\n  }\n}\n\nfunction lose() {\n  if (game.getStatus() === Game.LOSE) {\n    messegeLose.classList.remove('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  static ROWS = 4;\n  static COLUMNS = 4;\n  static IDLE = 'idle';\n  static PLAYING = 'playing';\n  static WIN = 'win';\n  static LOSE = 'lose';\n\n  static getInitialStateDefault() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  constructor(initialState = Game.getInitialStateDefault()) {\n    this.setBoard = JSON.parse(JSON.stringify(initialState));\n    this.board = JSON.parse(JSON.stringify(initialState));\n    this.score = 0;\n    this.status = Game.IDLE;\n  }\n\n  moveLeft() {\n    if (this.canMoveLeft() && this.status === Game.PLAYING) {\n      for (let r = 0; r < Game.ROWS; r++) {\n        let rowCurrent = this.board[r];\n\n        rowCurrent = this.slide(rowCurrent);\n\n        this.board[r] = rowCurrent;\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveRight() {\n    if (this.canMoveRight() && this.status === Game.PLAYING) {\n      for (let r = 0; r < Game.ROWS; r++) {\n        let rowCurrent = this.board[r];\n\n        rowCurrent.reverse();\n\n        rowCurrent = this.slide(rowCurrent);\n\n        this.board[r] = rowCurrent.reverse();\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveUp() {\n    if (this.canMoveUp() && this.status === Game.PLAYING) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        let rowCurrent = [\n          this.board[0][c],\n          this.board[1][c],\n          this.board[2][c],\n          this.board[3][c],\n        ];\n\n        rowCurrent = this.slide(rowCurrent);\n\n        for (let r = 0; r < Game.ROWS; r++) {\n          this.board[r][c] = rowCurrent[r];\n        }\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveDown() {\n    if (this.canMoveDown() && this.status === Game.PLAYING) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        let rowCurrent = [\n          this.board[0][c],\n          this.board[1][c],\n          this.board[2][c],\n          this.board[3][c],\n        ];\n\n        rowCurrent.reverse();\n        rowCurrent = this.slide(rowCurrent);\n        rowCurrent.reverse();\n\n        for (let r = 0; r < Game.ROWS; r++) {\n          this.board[r][c] = rowCurrent[r];\n        }\n      }\n\n      this.setTwo();\n      this.checkLose();\n      this.checkWin();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.setTwo();\n    this.setTwo();\n    this.status = Game.PLAYING;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.board = JSON.parse(JSON.stringify(this.setBoard));\n    this.status = Game.IDLE;\n  }\n\n  setTwo() {\n    // check empty cell\n    if (!this.hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n    let r = 0;\n    let c = 0;\n    let num = 0;\n\n    while (!found) {\n      // find random row and column to place a 2 and 4 in\n\n      r = Math.floor(Math.random() * Game.ROWS);\n      c = Math.floor(Math.random() * Game.COLUMNS);\n\n      if (this.board[r][c] === 0) {\n        num = Math.random() > 0.1 ? 2 : 4;\n\n        this.board[r][c] = num;\n\n        found = true;\n      }\n    }\n  }\n\n  hasEmptyTile() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  filterZero(array) {\n    return array.filter((num) => num !== 0);\n  }\n\n  slide(rowCurrent) {\n    let row = rowCurrent;\n\n    row = this.filterZero(rowCurrent);\n\n    if (row.length === 0) {\n      return [0, 0, 0, 0];\n    }\n\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    row = this.filterZero(row);\n\n    while (row.length < Game.ROWS) {\n      row.push(0);\n    }\n\n    return row;\n  }\n\n  checkWin() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      for (let c = 0; c < Game.COLUMNS; c++) {\n        if (this.board[r][c] === 2048) {\n          this.status = Game.WIN;\n        }\n      }\n    }\n  }\n\n  checkLose() {\n    // if no empty cell and u cant move left right down up\n    const arrayOfConditions = [\n      this.hasEmptyTile(),\n      this.canMoveLeft(),\n      this.canMoveRight(),\n      this.canMoveUp(),\n      this.canMoveDown(),\n    ];\n\n    if (arrayOfConditions.indexOf(true) === -1) {\n      this.status = Game.LOSE;\n    }\n  }\n\n  canMoveLeft() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      const row1 = Array.from(this.board[r]);\n      const row2 = this.canSlide(row1);\n\n      // if two rows not the same\n      // thant mean one of the tile was moved and we can make a move\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    // if they all same nothing changes\n    return false;\n  }\n\n  canMoveRight() {\n    for (let r = 0; r < Game.ROWS; r++) {\n      const row1 = Array.from(this.board[r]);\n      const row2 = this.canSlide(row1.reverse());\n\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canMoveUp() {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const row = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      const row1 = Array.from(row);\n      const row2 = this.canSlide([...row1]);\n\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canMoveDown() {\n    for (let c = 0; c < Game.COLUMNS; c++) {\n      const row = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      const row1 = Array.from(row);\n      const row2 = this.canSlide([...row1].reverse()).reverse();\n\n      if (!this.isArrayTheSame(row1, row2)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isArrayTheSame(row1, row2) {\n    for (let i = 0; i < row1.length; i++) {\n      if (row1[i] !== row2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSlide(rowCurrent) {\n    let row = rowCurrent;\n\n    row = this.filterZero(rowCurrent);\n\n    if (row.length === 0) {\n      return [0, 0, 0, 0];\n    }\n\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n      }\n    }\n\n    row = this.filterZero(row);\n\n    while (row.length < Game.ROWS) {\n      row.push(0);\n    }\n\n    return row;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$cd5a47cf8ef6d766$export$1e71eb4bef00f6b0","obj","value","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","$3d28d7f1aac198f5$var$Game","protoProps","staticProps","Game","initialState","arguments","getInitialStateDefault","instance","Constructor","setBoard","JSON","parse","stringify","board","score","status","IDLE","canMoveLeft","PLAYING","r","ROWS","rowCurrent","slide","setTwo","checkLose","checkWin","canMoveRight","reverse","canMoveUp","c","COLUMNS","canMoveDown","hasEmptyTile","found","num","Math","floor","random","array","filter","row","filterZero","push","WIN","arrayOfConditions","indexOf","LOSE","row1","row2","canSlide","isArrayTheSame","$197cd56b15c33885$var$game","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$messegeStart","$197cd56b15c33885$var$messegeWin","$197cd56b15c33885$var$messegeLose","$197cd56b15c33885$var$updateCell","cell","textContent","classList","add","innerText","$197cd56b15c33885$var$setTile","getElementById","$197cd56b15c33885$var$win","getStatus","remove","$197cd56b15c33885$var$lose","onclick","contains","start","$197cd56b15c33885$var$setTheBoard","restart","cells","querySelectorAll","forEach","addEventListener","e","code","$197cd56b15c33885$var$moveLeft","moveLeft","$197cd56b15c33885$var$moveRight","moveRight","$197cd56b15c33885$var$moveUp","moveUp","$197cd56b15c33885$var$moveDown","moveDown","getScore"],"version":3,"file":"index.e1b7ad27.js.map"}